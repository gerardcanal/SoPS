///////////////////////////////////////////////////////////////////////////////
//
// A domain for autonomous user feeding.
//
// Author: Gerard Canal (gcanal@iri.upc.edu)
// 
///////////////////////////////////////////////////////////////////////////////

domain feeding_2approach {
    types {
        type: object;
    };

    pvariables {
        //////////////////////////////////////////////////////////////////////////////////////////
        // Non-fluents
        GOAL_REWARD: { non-fluent, real, default=50 };

        //////////////////////////////////////////////////////////////////////////////////////////
        // State fluents
    //N_SPOONFULS: { state-fluent, int, default=0 };
        food_grasped:  { state-fluent, bool, default=false };
        close_to_mouth:  { state-fluent, bool, default=false };
        user_fed: { state-fluent, bool, default=false };
        mouth_open: { state-fluent, bool, default=false };
        //user_attending: { state-fluent, bool, default=false };
        interacted: { state-fluent, bool, default=false }; // Either ask or inform
        spoonful_completed:  { state-fluent, bool, default=false }; // ready to feed
        finished:  { state-fluent, bool, default=false }; // ready to feed

        //////////////////////////////////////////////////////////////////////////////////////////
        // Action fluents
        graspFood: { action-fluent, bool, default=false }; // MP
        
        approachStraight: { action-fluent, bool, default=false }; // MP
        approachBelow: { action-fluent, bool, default=false }; // MP
        approachLeft: { action-fluent, bool, default=false }; // MP
        approachRight: { action-fluent, bool, default=false }; // MP
        
        // Feed without curving the spoon
        feedStraight: { action-fluent, bool, default=false }; // MP
        feedScooping: { action-fluent, bool, default=false }; // MP
        
        // Waits for the user to grasp the food from the spoon without inserting it
        waitForUserFeeding: { action-fluent, bool, default=false }; // no pref

        moveAway: { action-fluent, bool, default=false }; // MP
        
        waitBetweenFeeds: { action-fluent, bool, default=false }; // no pref


        //Interaction
        inform: { action-fluent, bool, default=false };  // IP
        requestMouthOpen: { action-fluent, bool, default=false };  // IP
        //requestAttention: { action-fluent, bool, default=false };  // IP

        // Goal simulation
        goal: { action-fluent, bool, default=false };
        goal_reached: { state-fluent, bool, default=false };


        // Fluents to force that actions are different and selectable
        sf_graspFood: { state-fluent, bool, default=false }; // State-fluent to force different action effect for each action and avoid prunning
        sf_approachStraight: { state-fluent, bool, default=false }; // State-fluent to force different action effect for each action and avoid prunning
        sf_approachBelow: { state-fluent, bool, default=false }; // State-fluent to force different action effect for each action and avoid prunning
        sf_approachLeft: { state-fluent, bool, default=false }; // State-fluent to force different action effect for each action and avoid prunning
        sf_approachRight: { state-fluent, bool, default=false }; // State-fluent to force different action effect for each action and avoid prunning
        sf_feedStraight: { state-fluent, bool, default=false }; // State-fluent to force different action effect for each action and avoid prunning
        sf_feedScooping: { state-fluent, bool, default=false }; // State-fluent to force different action effect for each action and avoid prunning
        sf_waitForUserFeeding: { state-fluent, bool, default=false }; // State-fluent to force different action effect for each action and avoid prunning
        sf_moveAway: { state-fluent, bool, default=false }; // State-fluent to force different action effect for each action and avoid prunning
        sf_waitBetweenFeeds: { state-fluent, bool, default=false }; // State-fluent to force different action effect for each action and avoid prunning
    };
    cpfs {
        food_grasped' = if (graspFood) then true
                        else if (feedStraight | feedScooping | waitForUserFeeding) then false
                        else food_grasped;

        close_to_mouth' = if (approachStraight | approachBelow | approachLeft | approachRight) then true
                          else if (moveAway) then false
                          else close_to_mouth;

        user_fed' = if (feedStraight | feedScooping | waitForUserFeeding) then true
                    else if (graspFood | waitBetweenFeeds) then false
                    else user_fed;

        mouth_open' = if (requestMouthOpen) then true
                      else if (approachStraight | approachBelow | approachLeft | approachRight) then true // FIXME probabilistic?
                      else mouth_open;
        //user_attending' = if (requestAttention) then true
        //                  else user_attending;

        interacted' = if (inform | requestMouthOpen) then true
                      else if (approachStraight | approachBelow | approachLeft | approachRight) then false
                      else if (graspFood) then false
                      else if (feedStraight | feedScooping | waitForUserFeeding | waitBetweenFeeds) then false
                      else interacted;

        spoonful_completed' = if (waitBetweenFeeds | moveAway) then true
                              else spoonful_completed;
        
        finished' = if (spoonful_completed ^ waitBetweenFeeds) then true
                    else if (spoonful_completed ^ moveAway) then true
                    else finished;

        goal_reached' = if (goal) then true else goal_reached;


        // Workaround fluents
        sf_graspFood' = graspFood;
        sf_approachStraight' = approachStraight;
        sf_approachBelow' = approachBelow;
        sf_approachLeft' = approachLeft;
        sf_approachRight' = approachRight;
        sf_feedStraight' = feedStraight;
        sf_feedScooping' = feedScooping;
        sf_waitForUserFeeding' = waitForUserFeeding;
        sf_moveAway' = moveAway;
        sf_waitBetweenFeeds' = waitBetweenFeeds;
    };

    action-preconditions {
        graspFood => (~goal_reached ^ ~food_grasped ^ ~close_to_mouth);

        approachStraight => (~goal_reached ^ food_grasped ^ ~close_to_mouth ^ ~user_fed);
        approachBelow => (~goal_reached ^ food_grasped ^ ~close_to_mouth ^ ~user_fed);
        approachLeft => (~goal_reached ^ food_grasped ^ ~close_to_mouth ^ ~user_fed);
        approachRight => (~goal_reached ^ food_grasped ^ ~close_to_mouth ^ ~user_fed);
        
        feedStraight => (~goal_reached ^ close_to_mouth ^ ~user_fed);
        feedScooping => (~goal_reached ^ close_to_mouth ^ ~user_fed);
        waitForUserFeeding => (~goal_reached ^ close_to_mouth ^ ~user_fed);
        
        moveAway => (~goal_reached ^ user_fed ^ close_to_mouth);
        
        waitBetweenFeeds => (~goal_reached ^ user_fed ^ ~close_to_mouth);


        inform => (~goal_reached ^ ~interacted);
        requestMouthOpen => (~goal_reached ^ ~interacted ^ ~mouth_open); 
        //requestAttention => (~goal_reached ^ ~interacted ^ ~user_attending); 

        // Goal
        goal => (~goal_reached ^ finished);
    };

    state-invariants {
    };

    reward = if (~goal_reached ^ goal) then GOAL_REWARD
             else if (goal_reached) then 0
             else -1;


}
